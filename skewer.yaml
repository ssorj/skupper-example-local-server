title: Skupper local server
subtitle: Accept connections to a local process from a remote service
github_actions_url: https://github.com/ssorj/skupper-example-local-client/actions/workflows/main.yaml
overview: |
  This example is a multi-service HTTP application deployed across a
  Kubernetes cluster and a bare-metal host or VM.

  It contains two services:

  * A backend service that exposes an `/api/hello` endpoint.  It
    returns greetings of the form `Hi, <your-name>.  I am <my-name>
    (<pod-name>)`.

  * A frontend service that sends greetings to the backend and
    fetches new greetings in response.

  The frontend runs on Kubernetes and the backend runs on your local
  machine.  Skupper enables the frontend to connect to the backend
  using a dedicated service network.

  <!-- <img src="images/entities.svg" width="640"/> -->
prerequisites: |
  * A working installation of Docker ([installation
    guide][install-docker]) or Podman ([installation
    guide][install-podman])

  * The `kubectl` command-line tool, version 1.15 or later
    ([installation guide][install-kubectl])

  * Access to a Kubernetes cluster, from [any provider you
    choose][kube-providers]

  * XXX `pip install starlette uvicorn`

  [install-docker]: https://docs.docker.com/engine/install/
  [install-podman]: https://podman.io/getting-started/installation
  [install-kubectl]: https://kubernetes.io/docs/tasks/tools/install-kubectl/
  [kube-providers]: https://skupper.io/start/kubernetes.html#providers
sites:
  hello-world:
    kubeconfig: ~/.kube/config-hello-world
    namespace: hello-world
steps:
  - standard: install_the_skupper_command_line_tool
  - title: Access your Kubernetes cluster
    preamble: |
      The procedure for accessing a Kubernetes cluster varies by
      provider. [Find the instructions for your chosen
      provider][kube-providers] and use them to authenticate and
      configure access.

      [kube-providers]: https://skupper.io/start/kubernetes.html#providers
  - title: Set up your Kubernetes namespace
    preamble: |
      Use `kubectl create namespace` to create the namespace you wish
      to use (or use an existing namespace).  Use `kubectl config
      set-context` to set the current namespace for your session.
    commands:
      hello-world:
        - run: kubectl create namespace hello-world
          output: namespace/hello-world created
        - run: kubectl config set-context --current --namespace hello-world
          output: Context "minikube" modified.
  - title: Install Skupper in your Kubernetes namespace
    preamble: |
      The `skupper init` command installs the Skupper router and service
      controller in the current namespace.

      **Note:** If you are using Minikube, [you need to start `minikube
      tunnel`][minikube-tunnel] before you install Skupper.

      [minikube-tunnel]: https://skupper.io/start/minikube.html#running-minikube-tunnel
    commands:
      hello-world:
        - run: skupper init
          output: |
            Waiting for LoadBalancer IP or hostname...
            Skupper is now installed in namespace 'hello-world'.  Use 'skupper status' to get more information.
  - title: Deploy and expose the frontend on Kubernetes
    preamble: |
      Use `kubectl create deployment` to deploy the frontend service
      in `hello-world`.

      Use `kubectl expose` with `--type LoadBalancer` to open network
      access to the frontend service.
    commands:
      hello-world:
        - run: kubectl create deployment frontend --image quay.io/skupper/hello-world-frontend
          output: deployment.apps/frontend created
        - await: deployment/frontend
        - run: kubectl expose deployment/frontend --port 8080 --type LoadBalancer
          output: service/frontend exposed
  - title: Deploy and expose the backend on your local machine
    preamble: |
      Run the backend service on your local machine.

      XXX Use the `skupper gateway init` command to set up a gateway
      router on your local machine.  Use the `--type docker` option to
      run the router in a Docker container.

      XXX Use the `skupper gateway expose` command to make the backend
      service available on local port 8081.
    commands:
      hello-world:
        - run: (cd backend && python python/main.py --host localhost --port 8080) &
          output: |
            INFO:     Started server process [1751062]
            INFO:     Waiting for application startup.
            INFO:     Application startup complete.
            INFO:     Uvicorn running on http://localhost:8080 (Press CTRL+C to quit)
        - run: skupper gateway expose backend localhost 8080 --type docker
          output: |
            2022/08/26 07:27:11 CREATE io.skupper.router.tcpConnector fancypants-jross-egress-backend:8080 map[address:backend:8080 host:localhost name:fancypants-jross-egress-backend:8080 port:8080 siteId:f1e916db-8786-4bad-81ce-f1d3531179f0]
        - await: service/backend
        - run: kubectl get service/backend
          output: |
            NAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
            backend   ClusterIP   10.101.76.37   <none>        8080/TCP   10s
  - standard: test_the_application
  - standard: accessing_the_web_console
  - standard: cleaning_up
    commands:
      hello-world:
        - run: kill $(ps -ef | grep 'python python/main\.py' | awk '{print $2}') 2> /dev/null
        - run: skupper gateway delete
        - run: skupper delete
        - run: kubectl delete service/frontend
        - run: kubectl delete deployment/frontend
